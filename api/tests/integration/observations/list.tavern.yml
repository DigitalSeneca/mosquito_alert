---

test_name: 'Common permission tests for observations list (inherits from report)'

includes:
  - !include '../shared/reports/list.yml'
  - !include 'schema.yml'

marks:
  - usefixtures:
    - api_live_url
    - published_object
    - unpublished_object
    - token_user
    - app_user_token

stages:
  - type: ref
    id: anonymous_can_list_published_only
  - type: ref
    id: auth_without_perm_can_list_all
  # Creating a new appuser that does not own the object
  - id: signup
    type: ref
  - id: login
    type: ref
  - type: ref
    id: new_appuser_can_retrieve_published_and_owned

---

test_name: 'Common permission tests for observations list and get_my_observations (inherits from report)'

includes:
  - !include '../shared/reports/list.yml'
  - !include 'schema.yml'

marks:
  - usefixtures:
    - api_live_url
    - published_object
    - unpublished_object
    - app_user_token
  - parametrize:
      key: endpoint
      vals:
        - "{endpoint}"
        - "me/{endpoint}"

stages:
  - type: ref
    id: appuser_can_retrieve_published_and_owned

---

test_name: 'Filters for observations list'

includes:
  - !include '../shared/reports/list.yml'
  - !include 'schema.yml'

marks:
  - usefixtures:
    - api_live_url
    - published_object

stages:
  - type: ref
    id: filter_by_user_uuid

---

test_name: 'Filters for observations list has_photos'

includes:
  - !include 'schema.yml'

marks:
  - usefixtures:
    - api_live_url
    - app_user_token
    - published_object
    - published_observation_with_photo
  - parametrize:
      key: endpoint
      vals:
        - "{endpoint}"
        - "me/{endpoint}"

stages:
  - name: Filter by has_photos True
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        has_photos: True
      headers:
        Authorization: 'Bearer {app_user_token}'
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_observation_with_photo.pk}"
  - name: Filter by has_photos False
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        has_photos: False
      headers:
        Authorization: 'Bearer {app_user_token}'
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_object.pk}"

---

test_name: 'Filters for observations list has_predictions'

includes:
  - !include 'schema.yml'

marks:
  - usefixtures:
    - api_live_url
    - app_user_token
    - published_object
    - published_observation_with_prediction
  - parametrize:
      key: endpoint
      vals:
        - "{endpoint}"
        - "me/{endpoint}"

stages:
  - name: Filter by has_prediction True
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        has_prediction: True
      headers:
        Authorization: 'Bearer {app_user_token}'
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_observation_with_prediction.pk}"
  - name: Filter by has_prediction False
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        has_prediction: False
      headers:
        Authorization: 'Bearer {app_user_token}'
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_object.pk}"

---

test_name: 'Filters for observations list has_predictions_all_photos'

includes:
  - !include 'schema.yml'

marks:
  - usefixtures:
    - api_live_url
    - app_user_token
    - published_observation_with_pending_photo_prediction
  - parametrize:
      key: endpoint
      vals:
        - "{endpoint}"
        - "me/{endpoint}"

stages:
  - name: Filter by has_predictions_all_photos True
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        has_predictions_all_photos: True
      headers:
        Authorization: 'Bearer {app_user_token}'
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 0
  - name: Filter by has_predictions_all_photos False
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        has_predictions_all_photos: False
      headers:
        Authorization: 'Bearer {app_user_token}'
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_observation_with_pending_photo_prediction.pk}"