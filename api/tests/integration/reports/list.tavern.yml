---

test_name: Published reports can be read by everybody.

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - published_adult_report
    - token_user

stages:
  - name: Non auth user can retrieve
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
    response: &response_published_report
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        next: !anything
        previous: !anything
        results:
          - uuid: "{published_adult_report.pk}"
  - name: User without perm view per retrieve
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Token {token_user:s}"
    response:
      <<: *response_published_report
  - id: signup
    type: ref
  - id: login
    type: ref
  - name: App user can retrieve
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {token}"
    response:
      <<: *response_published_report

---

test_name: Deleted reports can not be read by anybody even if publsihed.

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - app_user
    - deleted_published_adult_report
    - token_user_can_view

stages:
  - name: Non auth user can not retrieve deleted reports
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
    response: &response_deleted_report
      status_code: 200
      strict:
        - json:off
      json:
        count: 0
  - name: User with perm view can not retrieve deleted reports
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Token {token_user_can_view:s}"
    response:
      <<: *response_deleted_report
  - id: login
    name: Login app user using JWT
    request:
      url: "{api_live_url}/token/"
      json:
        uuid: "{app_user.pk}"
        password: "{user_password}"
      method: POST
    response:
      status_code: 200
      save:
        json:
          token: 'access'
  - name: App user owner can not list deleted reports
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {token}"
    response:
      <<: *response_deleted_report
  - id: signup
    type: ref
  - id: login
    type: ref
  - name: App user can retrieve deleted reports
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {token}"
    response:
      <<: *response_deleted_report

---

test_name: App user can only retrieve their notifications if not published.

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - app_user
    - adult_report

stages:
  - id: login
    name: Login app user using JWT
    request:
      url: "{api_live_url}/token/"
      json:
        uuid: "{app_user.pk}"
        password: "{user_password}"
      method: POST
    response:
      status_code: 200
      save:
        json:
          token: 'access'
  - name: App user can retrieve their notification
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {token}"
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{adult_report.pk}"
  - id: signup
    type: ref
  - id: login
    type: ref
  - name: App user can not retrieve others notification
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {token}"
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 0

---

test_name: Filter by user_uuid

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - published_adult_report

stages:
  - name: Filter by user_uuid
    request:
      url: "{api_live_url}/{endpoint}/?user_uuid={published_adult_report.user.pk}"
      method: "GET"
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1

---

test_name: Filter by has_photos

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - published_adult_report

stages:
  - name: Filter by has_photos True
    request:
      url: "{api_live_url}/{endpoint}/?has_photos=true"
      method: "GET"
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
  - name: Filter by has_photos False
    request:
      url: "{api_live_url}/{endpoint}/?has_photos=false"
      method: "GET"
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 0