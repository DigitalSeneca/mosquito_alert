---

name: Common GET (list) methods for reports-based objects.

# NOTE: ensure soft_deleted object and unpublished_diff_user are created
stages:
  - id: anonymous_can_list_published_only
    name: Non auth user can list
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
    response:
      status_code: 200
      strict: False
      json:
        count: 1
        results:
          - uuid: "{published_object.pk}"
  - id: auth_without_perm_can_list_all
    name: User without perm view per retrieve
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Token {token_user:s}"
    response:
      status_code: 200
      strict: False
      json:
        count: 2
        results:
          - uuid: "{published_object.pk}"
          - uuid: "{unpublished_object.pk}"
  - id: appuser_can_retrieve_published_and_owned
    name: App user can retrieve
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {app_user_token:s}"
    response:
      status_code: 200
      strict: 
        - json:off
      json:
        count: 2
        results:
          - uuid: "{published_object.pk}"
          - uuid: "{unpublished_object.pk}"
  - id: new_appuser_can_retrieve_published_and_owned
    name: App user can retrieve
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      headers:
        Authorization: "Bearer {token:s}"
    response:
      status_code: 200
      strict: 
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_object.pk}"
  - id: filter_by_user_uuid
    name: Filter by user_uuid
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "GET"
      params:
        user_uuid: "{published_object.user.pk}"
    response:
      status_code: 200
      strict:
        - json:off
      json:
        count: 1
        results:
          - uuid: "{published_object.pk}"


# name: Filter by has_photos

# includes:
#   - !include schema.yml

# marks:
#   - usefixtures:
#     - api_live_url
#     - published_adult_report

# stages:
#   - name: Filter by has_photos True
#     request:
#       url: "{api_live_url}/{endpoint}/?has_photos=true"
#       method: "GET"
#     response:
#       status_code: 200
#       strict:
#         - json:off
#       json:
#         count: 1
#   - name: Filter by has_photos False
#     request:
#       url: "{api_live_url}/{endpoint}/?has_photos=false"
#       method: "GET"
#     response:
#       status_code: 200
#       strict:
#         - json:off
#       json:
#         count: 0