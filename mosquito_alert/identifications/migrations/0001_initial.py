# Generated by Django 4.2.3 on 2023-09-07 07:58

from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.datetime
import django.utils.timezone
import django_lifecycle.mixins
import mosquito_alert.identifications.models
import mosquito_alert.utils.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("taxa", "0001_initial"),
        ("images", "0001_initial"),
        ("users", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("individuals", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalIdentification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "shape_type",
                    models.CharField(choices=[("rectangle", "rectangle")], default="rectangle", max_length=16),
                ),
                (
                    "points",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.FloatField(
                                validators=[
                                    django.core.validators.MinValueValidator(0),
                                    django.core.validators.MaxValueValidator(1),
                                ]
                            ),
                            size=2,
                        ),
                        size=None,
                    ),
                ),
                (
                    "sex",
                    models.CharField(blank=True, choices=[("F", "Female"), ("M", "Male")], max_length=1, null=True),
                ),
            ],
            options={
                "verbose_name": "external identification",
                "verbose_name_plural": "external identifications",
                "abstract": False,
                "default_related_name": "external_identifications",
            },
            bases=(mosquito_alert.utils.models.ObservableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="IdentifierProfile",
            fields=[
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user profile should be treated as active. ",
                        verbose_name="active",
                    ),
                ),
                ("is_superexpert", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "identifier user profile",
                "verbose_name_plural": "identifier user profiles",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="IndividualIdentificationTask",
            fields=[
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "individual",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="identification_task",
                        serialize=False,
                        to="individuals.individual",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(default=False, help_text="Whether it accepts or not more annotations."),
                ),
            ],
            options={
                "verbose_name": "individual identification task",
                "verbose_name_plural": "individual identification tasks",
                "permissions": [("can_lock_tasks", "Can lock identification tasks")],
                "abstract": False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PhotoIdentificationTask",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "total_annotations",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        editable=False,
                        help_text="Number of total annotations for the current task except cancelled annotations",
                    ),
                ),
                (
                    "skipped_annotations",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        editable=False,
                        help_text="Number of total cancelled annotations for the current task",
                    ),
                ),
                (
                    "total_predictions",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        editable=False,
                        help_text="Number of total predictions for the current task",
                    ),
                ),
                (
                    "total_external",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        editable=False,
                        help_text="Number of total external identifications for the current task.",
                    ),
                ),
                ("photo", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="images.photo")),
                (
                    "task",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photo_identification_tasks",
                        to="identifications.individualidentificationtask",
                    ),
                ),
            ],
            options={
                "verbose_name": "photo identification task",
                "verbose_name_plural": "photo identification tasks",
                "abstract": False,
                "default_related_name": "photo_identification_tasks",
            },
            bases=(
                mosquito_alert.utils.models.ObservableMixin,
                django_lifecycle.mixins.LifecycleModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="UserIdentification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "shape_type",
                    models.CharField(choices=[("rectangle", "rectangle")], default="rectangle", max_length=16),
                ),
                (
                    "points",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.FloatField(
                                validators=[
                                    django.core.validators.MinValueValidator(0),
                                    django.core.validators.MaxValueValidator(1),
                                ]
                            ),
                            size=2,
                        ),
                        size=None,
                    ),
                ),
                (
                    "sex",
                    models.CharField(blank=True, choices=[("F", "Female"), ("M", "Male")], max_length=1, null=True),
                ),
                (
                    "lead_time",
                    models.FloatField(
                        default=None,
                        editable=False,
                        help_text="How much time it took to annotate the task",
                        null=True,
                        verbose_name="lead time",
                    ),
                ),
                ("is_ground_truth", models.BooleanField(default=False)),
                ("was_skipped", models.BooleanField(default=False, help_text="User skipped the task")),
                (
                    "identifier_profile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="identifications",
                        to="identifications.identifierprofile",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="identifications.photoidentificationtask",
                    ),
                ),
            ],
            options={
                "verbose_name": "user identification",
                "verbose_name_plural": "user identifications",
                "abstract": False,
                "default_related_name": "user_identifications",
            },
            bases=(mosquito_alert.utils.models.ObservableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="TaxonClassificationCandidate",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "probability",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("is_seed", models.BooleanField(default=False)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                        validators=[mosquito_alert.identifications.models.validator_content_type_issubclass],
                    ),
                ),
                (
                    "label",
                    models.ForeignKey(
                        limit_choices_to={"rank__gte": 30},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="taxa.taxon",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(mosquito_alert.utils.models.ObservableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Prediction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "shape_type",
                    models.CharField(choices=[("rectangle", "rectangle")], default="rectangle", max_length=16),
                ),
                (
                    "points",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.FloatField(
                                validators=[
                                    django.core.validators.MinValueValidator(0),
                                    django.core.validators.MaxValueValidator(1),
                                ]
                            ),
                            size=2,
                        ),
                        size=None,
                    ),
                ),
                (
                    "sex",
                    models.CharField(blank=True, choices=[("F", "Female"), ("M", "Male")], max_length=1, null=True),
                ),
                (
                    "task",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="identifications.photoidentificationtask",
                    ),
                ),
            ],
            options={
                "verbose_name": "taxon image prediction run",
                "verbose_name_plural": "taxon image predictions runs",
                "abstract": False,
                "default_related_name": "predictions",
            },
            bases=(mosquito_alert.utils.models.ObservableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PhotoIdentificationTaskResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "shape_type",
                    models.CharField(choices=[("rectangle", "rectangle")], default="rectangle", max_length=16),
                ),
                (
                    "points",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.FloatField(
                                validators=[
                                    django.core.validators.MinValueValidator(0),
                                    django.core.validators.MaxValueValidator(1),
                                ]
                            ),
                            size=2,
                        ),
                        size=None,
                    ),
                ),
                (
                    "probability",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                (
                    "sex",
                    models.CharField(blank=True, choices=[("F", "Female"), ("M", "Male")], max_length=1, null=True),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("com", "Community"),
                            ("cv", "Computer Vision"),
                            ("ens", "Ensembled"),
                            ("ext", "External"),
                        ],
                        max_length=3,
                    ),
                ),
                ("is_ground_truth", models.BooleanField(default=False, editable=False)),
                (
                    "external_identifications",
                    models.ManyToManyField(
                        editable=False,
                        help_text="External identifications that contribute to this result.",
                        to="identifications.externalidentification",
                    ),
                ),
                (
                    "label",
                    models.ForeignKey(
                        limit_choices_to={"rank__gte": 30},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="taxa.taxon",
                    ),
                ),
                (
                    "predictions",
                    models.ManyToManyField(
                        editable=False,
                        help_text="Predictions that contribute to this result.",
                        to="identifications.prediction",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="identifications.photoidentificationtask",
                    ),
                ),
                (
                    "user_identifications",
                    models.ManyToManyField(
                        editable=False,
                        help_text="User identifications that contribute to this result.",
                        to="identifications.useridentification",
                    ),
                ),
            ],
            options={
                "verbose_name": "photo identification task result",
                "verbose_name_plural": "photo identification task results",
                "abstract": False,
            },
            bases=(mosquito_alert.utils.models.ObservableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="IndividualIdentificationTaskResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                (
                    "probability",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                (
                    "sex",
                    models.CharField(blank=True, choices=[("F", "Female"), ("M", "Male")], max_length=1, null=True),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("com", "Community"),
                            ("cv", "Computer Vision"),
                            ("ens", "Ensembled"),
                            ("ext", "External"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "label",
                    models.ForeignKey(
                        limit_choices_to={"rank__gte": 30},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="taxa.taxon",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="identifications.individualidentificationtask",
                    ),
                ),
            ],
            options={
                "verbose_name": "individual identification task result",
                "verbose_name_plural": "individual identification task results",
                "abstract": False,
            },
            bases=(mosquito_alert.utils.models.ObservableMixin, models.Model),
        ),
        migrations.AddField(
            model_name="individualidentificationtask",
            name="photos",
            field=models.ManyToManyField(through="identifications.PhotoIdentificationTask", to="images.photo"),
        ),
        migrations.AddConstraint(
            model_name="identifierprofile",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_identifierprofile_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="identifierprofile",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_identifierprofile_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="identifierprofile",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_identifierprofile_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddField(
            model_name="externalidentification",
            name="task",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="identifications.photoidentificationtask",
            ),
        ),
        migrations.AddConstraint(
            model_name="useridentification",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_useridentification_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="useridentification",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_useridentification_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="useridentification",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_useridentification_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="useridentification",
            constraint=models.UniqueConstraint(fields=("identifier_profile", "task"), name="unique_user_task"),
        ),
        migrations.AddConstraint(
            model_name="useridentification",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_ground_truth", True)),
                fields=("task",),
                name="unique_user_identification_ground_truth_task",
            ),
        ),
        migrations.AddConstraint(
            model_name="useridentification",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("is_ground_truth", False),
                    models.Q(("is_ground_truth", True), ("was_skipped", False)),
                    _connector="OR",
                ),
                name="skipped_identification_can_not_be_ground_truth",
            ),
        ),
        migrations.AddIndex(
            model_name="taxonclassificationcandidate",
            index=models.Index(fields=["content_type", "object_id"], name="identificat_content_c0a28a_idx"),
        ),
        migrations.AddConstraint(
            model_name="taxonclassificationcandidate",
            constraint=models.CheckConstraint(
                check=models.Q(("probability__range", (Decimal("0"), Decimal("1")))),
                name="identifications_taxonclassificationcandidate_probability_min_max_value",
            ),
        ),
        migrations.AddConstraint(
            model_name="taxonclassificationcandidate",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_taxonclassificationcandidate_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="taxonclassificationcandidate",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_taxonclassificationcandidate_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="taxonclassificationcandidate",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_taxonclassificationcandidate_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="taxonclassificationcandidate",
            constraint=models.UniqueConstraint(
                fields=("content_type", "object_id", "label"), name="unique_classification_candidate_by_label"
            ),
        ),
        migrations.AddConstraint(
            model_name="prediction",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_prediction_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="prediction",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_prediction_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="prediction",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_prediction_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("probability__range", (Decimal("0"), Decimal("1")))),
                name="identifications_photoidentificationtaskresult_probability_min_max_value",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_photoidentificationtaskresult_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_photoidentificationtaskresult_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_photoidentificationtaskresult_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.UniqueConstraint(
                fields=("task", "type"), name="identifications_photoidentificationtaskresult_unique_task_type"
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_ground_truth", True)), fields=("task",), name="unique_photo_ground_truth_task"
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("is_ground_truth", False), models.Q(("is_ground_truth", True), ("type", "com")), _connector="OR"
                ),
                name="only_community_result_allows_ground_truth",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtask",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_photoidentificationtask_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtask",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_photoidentificationtask_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtask",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_photoidentificationtask_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="photoidentificationtask",
            constraint=models.UniqueConstraint(fields=("task", "photo"), name="unique_task_photo"),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("probability__range", (Decimal("0"), Decimal("1")))),
                name="identifications_individualidentificationtaskresult_probability_min_max_value",
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_individualidentificationtaskresult_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_individualidentificationtaskresult_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtaskresult",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_individualidentificationtaskresult_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtaskresult",
            constraint=models.UniqueConstraint(
                fields=("task", "type"), name="identifications_individualidentificationtaskresult_unique_task_type"
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtask",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_individualidentificationtask_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtask",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_individualidentificationtask_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="individualidentificationtask",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_individualidentificationtask_updated_at_must_be_after_created_at",
            ),
        ),
        migrations.AddConstraint(
            model_name="externalidentification",
            constraint=models.CheckConstraint(
                check=models.Q(("created_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_externalidentification_created_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="externalidentification",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__lte", django.db.models.functions.datetime.Now())),
                name="identifications_externalidentification_updated_at_cannot_be_future_dated",
            ),
        ),
        migrations.AddConstraint(
            model_name="externalidentification",
            constraint=models.CheckConstraint(
                check=models.Q(("updated_at__gte", models.F("created_at"))),
                name="identifications_externalidentification_updated_at_must_be_after_created_at",
            ),
        ),
    ]
