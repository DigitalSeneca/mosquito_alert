# Generated by Django 2.2.7 on 2020-07-15 15:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('tigaserver_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Usually a species category. Can also be other/special case values', verbose_name='Name of the classification category')),
                ('specify_certainty_level', models.BooleanField(default=False, help_text='Indicates if for this row a certainty level must be supplied')),
            ],
        ),
        migrations.CreateModel(
            name='Complex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='This table is reserved for species combinations', verbose_name='Name of the complex category')),
            ],
        ),
        migrations.CreateModel(
            name='CrowdcraftingTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.IntegerField(default=None, null=True, unique=True)),
                ('photo', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='tigaserver_app.Photo')),
            ],
        ),
        migrations.CreateModel(
            name='CrowdcraftingUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OtherSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='List of other, not controlled species', verbose_name='Name of other species')),
                ('category', models.TextField(blank=True, help_text='The subcategory of other species, i.e. Other insects, Culicidae', verbose_name='Subcategory of other species')),
            ],
        ),
        migrations.CreateModel(
            name='UserStat',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('grabbed_reports', models.IntegerField(default=0, help_text='Number of reports grabbed since implementation of simplified reports. For each 3 reports grabbed, one is simplified', verbose_name='Grabbed reports')),
                ('license_accepted', models.BooleanField(default=False, verbose_name='Value is true if user has accepted the license terms of EntoLab')),
                ('national_supervisor_of', models.ForeignKey(blank=True, help_text='Country of which the user is national supervisor. It means that the user will receive all the reports in his country', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='supervisors', to='tigaserver_app.EuropeCountry')),
                ('native_of', models.ForeignKey(blank=True, help_text='Country in which the user operates. Used mainly for filtering purposes', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='natives', to='tigaserver_app.EuropeCountry')),
            ],
        ),
        migrations.CreateModel(
            name='MoveLabAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiger_certainty_category', models.IntegerField(blank=True, choices=[(-2, 'Definitely not a tiger mosquito'), (-1, 'Probably not a tiger mosquito'), (0, 'Not sure'), (1, 'Probably a tiger mosquito'), (2, 'Definitely a tiger mosquito')], null=True, verbose_name='Certainty')),
                ('certainty_notes', models.TextField(blank=True)),
                ('hide', models.BooleanField(default=False, verbose_name='Hide photo from public')),
                ('edited_user_notes', models.TextField(blank=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='movelab_annotation', to='tigacrafting.CrowdcraftingTask')),
            ],
        ),
        migrations.CreateModel(
            name='ExpertReportAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiger_certainty_category', models.IntegerField(blank=True, choices=[(2, 'Definitely Aedes albopictus'), (1, 'Probably Aedes albopictus'), (0, 'Not sure'), (-1, 'Probably neither albopictus nor aegypti'), (-2, 'Definitely not albopictus or aegypti')], default=None, help_text='Your degree of belief that at least one photo shows a tiger mosquito', null=True, verbose_name='Tiger Certainty')),
                ('aegypti_certainty_category', models.IntegerField(blank=True, choices=[(2, 'Definitely Aedes aegypti'), (1, 'Probably Aedes aegypti'), (0, 'Not sure'), (-1, 'Probably neither albopictus nor aegypti'), (-2, 'Definitely not albopictus or aegypti')], default=None, help_text='Your degree of belief that at least one photo shows an Aedes aegypti', null=True, verbose_name='Aegypti Certainty')),
                ('tiger_certainty_notes', models.TextField(blank=True, help_text='Internal notes for yourself or other experts', verbose_name='Internal Species Certainty Comments')),
                ('site_certainty_category', models.IntegerField(blank=True, choices=[(2, 'Definitely a breeding site'), (1, 'Probably a breeding site'), (0, 'Not sure'), (-1, 'Probably not a breeding site'), (-2, 'Definitely not a breeding site')], default=None, help_text='Your degree of belief that at least one photo shows a tiger mosquito breeding site', null=True, verbose_name='Site Certainty')),
                ('site_certainty_notes', models.TextField(blank=True, help_text='Internal notes for yourself or other experts', verbose_name='Internal Site Certainty Comments')),
                ('edited_user_notes', models.TextField(blank=True, help_text='Notes to display on public map', verbose_name='Public Note')),
                ('message_for_user', models.TextField(blank=True, help_text='Message that user will receive when viewing report on phone', verbose_name='Message to User')),
                ('status', models.IntegerField(choices=[(1, 'public'), (0, 'flagged'), (-1, 'hidden')], default=1, help_text='Whether report should be displayed on public map, flagged for further checking before public display), or hidden.', verbose_name='Status')),
                ('last_modified', models.DateTimeField(default=timezone.now)),
                ('validation_complete', models.BooleanField(default=False, help_text='Mark this when you have completed your review and are ready for your annotation to be displayed to public.')),
                ('revise', models.BooleanField(default=False, help_text='For superexperts: Mark this if you want to substitute your annotation for the existing Expert annotations. Make sure to also complete your annotation form and then mark the "validation complete" box.')),
                ('linked_id', models.CharField(blank=True, help_text='Use this field to add any other ID that you want to associate the record with (e.g., from some other database).', max_length=10, verbose_name='Linked ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('simplified_annotation', models.BooleanField(default=False, help_text='If True, the report annotation interface shows less input controls')),
                ('validation_value', models.IntegerField(blank=True, choices=[(2, 'Definitely'), (1, 'Probably')], default=None, help_text='Certainty value, 1 for probable, 2 for sure, 0 for none', null=True, verbose_name='Validation Certainty')),
                ('best_photo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='expert_report_annotations', to='tigaserver_app.Photo')),
                ('category', models.ForeignKey(blank=True, help_text='Simple category assigned by expert or superexpert. Mutually exclusive with complex. If this field has value, then probably there is a validation value', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='expert_report_annotations', to='tigacrafting.Categories')),
                ('complex', models.ForeignKey(blank=True, help_text='Complex category assigned by expert or superexpert. Mutually exclusive with category. If this field has value, there should not be a validation value', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='expert_report_annotations', to='tigacrafting.Complex')),
                ('other_species', models.ForeignKey(blank=True, help_text='Additional info supplied if the user selected the Other species category', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='expert_report_annotations', to='tigacrafting.OtherSpecies')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='expert_report_annotations', to='tigaserver_app.Report')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='expert_report_annotations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CrowdcraftingResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_id', models.IntegerField()),
                ('user_lang', models.CharField(blank=True, max_length=10)),
                ('mosquito_question_response', models.CharField(max_length=100)),
                ('tiger_question_response', models.CharField(max_length=100)),
                ('site_question_response', models.CharField(max_length=100)),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('finish_time', models.DateTimeField(blank=True, null=True)),
                ('user_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='responses', to='tigacrafting.CrowdcraftingTask')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='responses', to='tigacrafting.CrowdcraftingUser')),
            ],
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiger_certainty_percent', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Degree of belief')),
                ('value_changed', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('working_on', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='annotations', to='tigacrafting.CrowdcraftingTask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='annotations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
