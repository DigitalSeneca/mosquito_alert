# Generated by Django 3.2.25 on 2025-01-24 11:04
from datetime import timedelta

from django.conf import settings
from django.db import migrations, models
from django.db.models.functions import Coalesce
import django.db.models.deletion



def set_expertreportannotation_confidence(apps, schema_editor):
    ExpertReportAnnotation = apps.get_model('tigacrafting', 'ExpertReportAnnotation')

    ExpertReportAnnotation.objects.filter(validation_value=2).update(confidence=1.0)
    ExpertReportAnnotation.objects.filter(validation_value=1).update(confidence=0.75)

    from tigacrafting.models import Taxon

    # Fetch annotations where validation_value is not 1 or 2 and taxon exists
    annotations_with_taxon = ExpertReportAnnotation.objects.exclude(validation_value__in=[1, 2]).filter(taxon__isnull=False)

    # Update confidence for taxon.rank < SPECIES_COMPLEX
    annotations_with_taxon.filter(taxon__rank__lt=Taxon.TaxonomicRank.SPECIES_COMPLEX).update(confidence=1.0)

    # Update confidence for taxon.rank >= SPECIES_COMPLEX
    annotations_with_taxon.filter(taxon__rank__gte=Taxon.TaxonomicRank.SPECIES_COMPLEX).update(confidence=0.75)

def create_identification_tasks(apps, schema_editor):
    IdentificationTask = apps.get_model('tigacrafting', 'IdentificationTask')

    Report = apps.get_model('tigaserver_app', 'Report')
    Photo = apps.get_model('tigaserver_app', 'Photo')
    EuropeCountry = apps.get_model('tigaserver_app', 'EuropeCountry')

    report_qs = Report.objects.filter(
        models.Q(type='adult') | models.Q(flipped_to='adult')
    ).annotate(
        photo_exist=models.Exists(
            Photo.objects.filter(
                report=models.OuterRef('pk')
            )
        ),
        first_photo_pk=Photo.objects.filter(
            report=models.OuterRef('pk')
        ).values('pk')[:1]
    ).filter(
        photo_exist=True
    ).annotate(
        exclusivity_days=Coalesce(
            models.Subquery(
                EuropeCountry.objects.filter(
                    pk=models.OuterRef('country')
                ).values('national_supervisor_report_expires_in')[:1]
            ),
            models.Value(0)
        )
    )

    tasks_to_create = []
    for report in report_qs.iterator():
        tasks_to_create.append(
            IdentificationTask(
                report=report,
                photo_id=report.first_photo_pk,
                created_at=report.server_upload_time,
                exclusivty_end=report.server_upload_time + timedelta(days=report.exclusivity_days)
            )
        )
    IdentificationTask.objects.bulk_create(
        tasks_to_create,
        batch_size=2000
    )


class Migration(migrations.Migration):

    dependencies = [
        ('tigacrafting', '0026_populate_expertreportannotation_taxon'),
    ]

    operations = [
        migrations.AddField(
            model_name='expertreportannotation',
            name='confidence',
            field=models.FloatField(default=0.0),
        ),
        migrations.RunPython(set_expertreportannotation_confidence, migrations.RunPython.noop),
        migrations.CreateModel(
            name='IdentificationTask',
            fields=[
                ('report', models.OneToOneField(limit_choices_to={'type': 'adult'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='identification_task', serialize=False, to='tigaserver_app.report')),
                ('status', models.CharField(choices=[('open', 'Open'), ('conflict', 'Conflict'), ('flagged', 'Flagged'), ('review', 'Review'), ('done', 'Done'), ('archived', 'Archived')], db_index=True, default='open', max_length=16)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_identification_tasks', to=settings.AUTH_USER_MODEL)),
                ('is_reviewed', models.BooleanField(default=False, editable=False, db_index=True)),
                ('is_safe', models.BooleanField(default=False, editable=False, help_text='Indicates if the content is safe for publication.')),
                ('public_note', models.TextField(blank=True, editable=False, null=True)),
                ('total_annotations', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('total_finished_annotations', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('exclusivty_end', models.DateTimeField(blank=True, null=True, db_index=True)),
                ('confidence', models.FloatField(default=0.0, editable=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('photo', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='identification_tasks', to='tigaserver_app.photo')),
                ('taxon', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='tigacrafting.taxon')),
            ],
        ),
        migrations.RunPython(create_identification_tasks, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='identificationtask',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='expertreportannotation',
            name='identification_task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expert_report_annotations', to='tigacrafting.identificationtask'),
        ),
    ]
