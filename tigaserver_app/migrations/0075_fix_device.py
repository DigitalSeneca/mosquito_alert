# Generated by Django 3.2.25 on 2024-12-18 16:05

import datetime

from django.db import migrations, models
from django.db.models.functions import Coalesce
from django.utils.timezone import make_aware


def devices_last_login_can_not_be_null(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')
    Report = apps.get_model('tigaserver_app', 'Report')

    # Default date for null last_report_date
    default_date = models.Value(make_aware(datetime.datetime(1970, 1, 1)), output_field=models.DateTimeField())

    Device.objects.annotate(
        last_report_date=models.Subquery(
            Report.objects.filter(
                device=models.OuterRef('pk')
            ).order_by('-server_upload_time').values('server_upload_time')[:1]
        )
    ).update(
        last_login=models.Case(
            models.When(
                updated_at__gt=Coalesce(models.F('last_report_date'), default_date),
                then=models.F('updated_at')
            ),
            default=Coalesce(models.F('last_report_date'), default_date),
            output_field=models.DateTimeField()
    )
    )

def set_device_updated_at_to_last_history_date(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')
    HistoricalDevice = apps.get_model("tigaserver_app", "HistoricalDevice")

    Device.objects.update(
        updated_at=models.Subquery(
            HistoricalDevice.objects.filter(
                id=models.OuterRef('pk')
            ).order_by('-history_date').values('history_date')[:1]
        )
    )

def remove_duplicates(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')
    Report = apps.get_model('tigaserver_app', 'Report')

    # Identify the first created device for each user-model combination
    first_created_device_qs = Device.objects.filter(
        user=models.OuterRef('user'),
        model=models.OuterRef('model'),
    ).order_by('date_created').values('pk')[:1]

    # Find the last logged-in device for each user-model combination
    last_logged_in_device_qs = Device.objects.filter(
        user=models.OuterRef('user'),
        model=models.OuterRef('model'),
    ).order_by('-last_login')

    # Update the first created device with values from the last logged-in device
    Device.objects.filter(
        pk__in=first_created_device_qs
    ).update(
        last_login=models.Subquery(last_logged_in_device_qs.values('last_login')[:1]),
        registration_id=models.Subquery(last_logged_in_device_qs.values('registration_id')[:1])
    )

    # Identify duplicates to remove (all devices except the first created)
    duplicates_to_remove = Device.objects.filter(model__isnull=False).exclude(pk__in=first_created_device_qs)

    Report.objects.filter(
        device__in=duplicates_to_remove
    ).update(
        device=models.Subquery(
            Device.objects.filter(
                user=models.OuterRef('user'),
                model=models.OuterRef('device_model'),
            ).order_by('date_created').values('pk')[:1]
        )
    )

    duplicates_to_remove.delete()

def make_all_devices_with_registration_id_active(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')

    Device.objects.filter(
        models.Q(registration_id='BLACKLISTED')
        | models.Q(registration_id__isnull=True)
    ).update(
        active=False
    )

    latest_user_devices = Device.objects.filter(user=models.OuterRef('user')).order_by('-last_login').values('id')[:1]
    Device.objects.filter(
        registration_id__isnull=False,
        active=False,
        pk__in=latest_user_devices
    ).exclude(
        registration_id='BLACKLISTED'
    ).update(
        active=True
    )


def last_device_must_appear_as_logged_in(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')

    last_logged_in_device = Device.objects.filter(
        user=models.OuterRef('user')
    ).order_by('-last_login').values('id')[:1]

    Device.objects.filter(
        pk__in=models.Subquery(last_logged_in_device)
    ).update(is_logged_in=True)

class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0074_add_report_location_is_masked'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='device',
            name='unique_active_registration_id',
        ),
        migrations.RemoveConstraint(
            model_name='device',
            name='unique_is_logged_in_device_id',
        ),
        migrations.RemoveConstraint(
            model_name='device',
            name='unique_user_registration_id',
        ),
        migrations.RunPython(remove_duplicates, migrations.RunPython.noop),
        migrations.RunPython(devices_last_login_can_not_be_null, migrations.RunPython.noop),
        migrations.RunPython(last_device_must_appear_as_logged_in, migrations.RunPython.noop),
        migrations.RunPython(make_all_devices_with_registration_id_active, migrations.RunPython.noop),
        migrations.RunPython(set_device_updated_at_to_last_history_date, migrations.RunPython.noop),
    ]
