# Generated by Django 2.2.7 on 2024-11-14 11:43

from django.db import migrations, models


def remove_registration_id_duplicates(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')
    HistoricalDevice = apps.get_model("tigaserver_app", "HistoricalDevice")

    latest_device_subquery = Device.objects.filter(
        registration_id=models.OuterRef('registration_id'),
        active=True
    ).order_by('-date_created').values('pk')[:1]

    outdated_device_qs = Device.objects.filter(
        registration_id__isnull=False,
        active=True
    ).exclude(
        pk__in=models.Subquery(latest_device_subquery)
    ).annotate(
        updation_date=models.Subquery(
            Device.objects.filter(
                registration_id=models.OuterRef('registration_id'),
                date_created__gte=models.OuterRef('date_created')
            ).exclude(
                pk=models.OuterRef('pk')
            ).order_by('date_created').values('date_created')[:1]
        )
    )

    device_to_update = []
    histories_to_create = []
    for outdated_device in outdated_device_qs:
        outdated_device.active = False
        device_to_update.append(outdated_device)

        histories_to_create.append(
            HistoricalDevice(
                id=outdated_device.id,
                active=outdated_device.active,
                device_id=outdated_device.device_id,
                registration_id=outdated_device.registration_id,
                type=outdated_device.type,
                manufacturer=outdated_device.manufacturer,
                model=outdated_device.model,
                os_name=outdated_device.os_name,
                os_version=outdated_device.os_version,
                history_date=outdated_device.updation_date,
                history_type='~',
                history_change_reason='Another user has created a device with the same registration_id',
                history_user_id=outdated_device.user_id,
                mobile_app_id=outdated_device.mobile_app_id,
                os_locale=outdated_device.os_locale,
            )
        )

    Device.objects.bulk_update(device_to_update, fields=['registration_id', 'active'], batch_size=2000)
    histories = HistoricalDevice.objects.bulk_create(histories_to_create, batch_size=2000)

    # Update the 'active' field for the created histories
    HistoricalDevice.objects.filter(
        id__in=[h.id for h in histories],
        history_type='~',
        history_date__gt=models.F('history_date'),
    ).update(active=False)

def undo_removal_registration_id_duplicated(apps, schema_editor):
    Device = apps.get_model('tigaserver_app', 'Device')
    HistoricalDevice = apps.get_model("tigaserver_app", "HistoricalDevice")

    history_to_delete_qs = HistoricalDevice.objects.filter(
        history_change_reason='Another user has created a device with the same registration_id'
    )
    history_to_delete_list = history_to_delete_qs.values_list('id', flat=True)

    # Retrieve the devices that need to be updated and mark them as active
    Device.objects.filter(pk__in=history_to_delete_list).update(active=True)

    # Update the 'active' field for the created histories
    HistoricalDevice.objects.filter(
        id__in=history_to_delete_list,
        history_type='~',
        history_date__gt=models.F('history_date'),
    ).update(active=False)

    history_to_delete_qs.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0068_add_device_history'),
    ]

    operations = [
        migrations.RunPython(remove_registration_id_duplicates, undo_removal_registration_id_duplicated),
        migrations.AddConstraint(
            model_name='device',
            constraint=models.UniqueConstraint(condition=models.Q(('active', True), models.Q(('registration_id', None), _negated=True), models.Q(('registration_id__exact', ''), _negated=True)), fields=('registration_id',), name='unique_active_registration_id'),
        ),
        migrations.AddConstraint(
            model_name='device',
            constraint=models.UniqueConstraint(condition=models.Q(('is_logged_in', True), models.Q(('device_id', None), _negated=True), models.Q(('device_id__exact', ''), _negated=True)), fields=('device_id',), name='unique_is_logged_in_device_id'),
        ),
    ]


