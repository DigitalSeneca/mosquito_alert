# Generated by Django 2.2.7 on 2024-11-11 08:18

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):

    dependencies = [
        ('tigacrafting', '0022_auto_20241029_1010'),
        ('tigaserver_app', '0074_add_report_location_is_masked'),
    ]

    operations = [
        migrations.DeleteModel(
            name='IAScore',
        ),
        migrations.CreateModel(
            name='PhotoPrediction',
            fields=[
                ('photo', models.OneToOneField(help_text='Photo to which the score refers to', limit_choices_to={'report__type': 'adult'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='prediction', serialize=False, to='tigaserver_app.Photo')),
                ('classifier_version', models.CharField(choices=[('v2023.1', 'v2023.1'), ('v2024.1', 'v2024.1'), ('v2025.1', 'v2025.1')], max_length=16)),
                ('insect_confidence', models.FloatField(help_text='Insect confidence', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('predicted_class', models.CharField(choices=[('ae_albopictus', 'Aedes albopictus'), ('ae_aegypti', 'Aedes aegypti'), ('ae_japonicus', 'Aedes japonicus'), ('ae_koreicus', 'Aedes koreicus'), ('culex', 'Culex (s.p)'), ('anopheles', 'Anopheles (s.p.)'), ('culiseta', 'Culiseta (s.p.)'), ('other_species', 'Ohter species'), ('not_sure', 'Unidentifiable')], default='not_sure', max_length=32)),
                ('threshold_deviation', models.FloatField(validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('x_tl', models.PositiveIntegerField(help_text='photo bounding box coordinates top left x')),
                ('x_br', models.PositiveIntegerField(help_text='photo bounding box coordinates bottom right x')),
                ('y_tl', models.PositiveIntegerField(help_text='photo bounding box coordinates top left y')),
                ('y_br', models.PositiveIntegerField(help_text='photo bounding box coordinates bottom right y')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ae_albopictus_score', models.FloatField(help_text='Score value for the class Aedes albopictus', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ae_aegypti_score', models.FloatField(help_text='Score value for the class Aedes aegypti', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ae_japonicus_score', models.FloatField(help_text='Score value for the class Aedes japonicus', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ae_koreicus_score', models.FloatField(help_text='Score value for the class Aedes koreicus', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('culex_score', models.FloatField(help_text='Score value for the class Culex (s.p)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('anopheles_score', models.FloatField(help_text='Score value for the class Anopheles (s.p.)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('culiseta_score', models.FloatField(help_text='Score value for the class Culiseta (s.p.)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('other_species_score', models.FloatField(help_text='Score value for the class Ohter species', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('not_sure_score', models.FloatField(help_text='Score value for the class Unidentifiable', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.AddConstraint(
            model_name='photoprediction',
            constraint=models.CheckConstraint(check=models.Q(x_tl__lte=django.db.models.expressions.F('x_br')), name='x_tl_less_equal_x_br'),
        ),
        migrations.AddConstraint(
            model_name='photoprediction',
            constraint=models.CheckConstraint(check=models.Q(y_tl__lte=django.db.models.expressions.F('y_br')), name='y_tl_less_equal_y_br'),
        ),
        migrations.CreateModel(
            name='ObservationPrediction',
            fields=[
                ('report', models.OneToOneField(limit_choices_to={'report__type': 'adult'}, on_delete=django.db.models.deletion.CASCADE, related_name='prediction', primary_key=True, serialize=False, to='tigaserver_app.Report')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='observationprediction',
            name='expert_annotation',
            field=models.ForeignKey(blank=True, help_text='Linked expert annotation created after setting this prediction to be used a executive validation.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tigacrafting.ExpertReportAnnotation'),
        ),
        migrations.AddField(
            model_name='observationprediction',
            name='photo_prediction',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tigaserver_app.PhotoPrediction'),
        ),
        migrations.RemoveField(
            model_name='report',
            name='ia_filter_1',
        ),
        migrations.RemoveField(
            model_name='report',
            name='ia_filter_2',
        ),
    ]
