# Generated by Django 2.2.7 on 2024-11-14 11:43

import itertools
from django.db import migrations, models
import django.db.models.deletion
import langcodes
from langcodes import standardize_tag as standarize_language_tag


def standarize_report_os_language_locale(apps, schema_editor):
    Report = apps.get_model('tigaserver_app', 'Report')
    reports_to_update = []
    for report in Report.objects.filter(os_language__isnull=False).exclude(os_language='').iterator():
        standard_os_language = standarize_language_tag(report.os_language)
        if report.os_language != standard_os_language:
            report.os_language = standard_os_language
            reports_to_update.append(report)
    Report.objects.bulk_update(reports_to_update, fields=['os_language'])

def unpopulate_devices(apps, schema_editor):
    TigaUser = apps.get_model('tigaserver_app', 'TigaUser')
    Device = apps.get_model('tigaserver_app', 'Device')

    TigaUser.objects.update(
        device_token=models.Subquery(
            Device.objects.filter(
                user_id=models.OuterRef('pk')
            ).order_by('-date_created').values('registration_id')[:1]
        )
    )

def populate_devices(apps, schema_editor):
    TigaUser = apps.get_model('tigaserver_app', 'TigaUser')
    Report = apps.get_model('tigaserver_app', 'Report')
    Device = apps.get_model('tigaserver_app', 'Device')

    def create_devices_from_users_without_report():
        device_to_add = []

        users_without_reports_qs = TigaUser.objects.annotate(
            num_reports=models.Count('user_reports')
        ).filter(
            device_token__isnull=False,
            num_reports=0
        ).exclude(
            device_token=''
        )
        for user in users_without_reports_qs.iterator():
            device_to_add.append(
                Device(
                    user=user,
                    registration_id=user.device_token,
                    active=user.device_token not in [None, ""],
                    date_created=user.registration_time,
                    updated_at=user.registration_time,
                )
            )
        return device_to_add

    def create_devices_from_users_with_report():
        earliest_report_subquery = Report.objects.filter(
            user=models.OuterRef('user'),
            device_model=models.OuterRef('device_model')
        ).order_by('server_upload_time').values('pk')[:1]

        first_report_per_device_qs = Report.objects.filter(
            pk__in=models.Subquery(earliest_report_subquery)
        ).order_by('user', 'device_model').distinct('user', 'device_model').select_related('user')

        device_to_add = []
        for first_report_device in first_report_per_device_qs.iterator():
            device_to_add.append(
                Device(
                    user_id=first_report_device.user_id,
                    registration_id=first_report_device.user.device_token,
                    active=first_report_device.user.device_token not in [None, ''],
                    date_created=first_report_device.server_upload_time,
                    updated_at=first_report_device.server_upload_time, # NOTE: set to last history in following migratinos
                    type={
                        'Android': 'android',
                        'iPadOS': 'ios',
                        'iOS': 'ios',
                        'iPhone OS': 'ios'
                    }.get(first_report_device.os),
                    manufacturer=first_report_device.device_manufacturer,
                    model=first_report_device.device_model,
                    os_name=first_report_device.os,
                    os_version=first_report_device.os_version,
                    os_locale=standarize_language_tag(first_report_device.os_language),
                    mobile_app_id=first_report_device.mobile_app_id,
                )
            )

        # Sorting before groupby
        device_to_add.sort(key=lambda x: x.user_id)
        device_to_add_filtered = []
        for key, group in itertools.groupby(device_to_add, key=lambda x: x.user_id):
            # Sort by date_created reverse
            for i, element in enumerate(sorted(group, key=lambda x: x.date_created, reverse=True)):
                if i != 0:
                    # If not the one with the latest date, set to None.
                    element.registration_id = None
                    element.active = False

                device_to_add_filtered.append(element)

        return device_to_add_filtered


    device_to_add = []
    device_to_add += create_devices_from_users_without_report()
    device_to_add += create_devices_from_users_with_report()

    Device.objects.bulk_create(device_to_add, batch_size=2000)

class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0065_add_mobileapp'),
    ]

    operations = [
        migrations.RunPython(standarize_report_os_language_locale, migrations.RunPython.noop),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('active', models.BooleanField(default=True, help_text='Inactive devices will not be sent notifications', verbose_name='Is active')),
                ('date_created', models.DateTimeField(null=True, verbose_name='Creation date')),
                ('device_id', models.CharField(blank=True, db_index=True, help_text='Unique device identifier', max_length=255, null=True, verbose_name='Device ID')),
                ('registration_id', models.TextField(null=True, verbose_name='Registration token')),
                ('type', models.CharField(null=True, choices=[('ios', 'ios'), ('android', 'android'), ('web', 'web')], max_length=10)),
                ('manufacturer', models.CharField(blank=True, help_text='The manufacturer of the device.', max_length=128, null=True)),
                ('model', models.CharField(blank=True, help_text='The end-user-visible name for the end product.', max_length=128, null=True)),
                ('os_name', models.CharField(blank=True, help_text='Operating system of device from which this report was submitted.', max_length=64, null=True)),
                ('os_version', models.CharField(blank=True, help_text='Operating system version of device from which this report was submitted.', max_length=16, null=True)),
                ('updated_at', models.DateTimeField()),
                ('last_login', models.DateTimeField(null=True)),
                ('mobile_app', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tigaserver_app.MobileApp')),
                ('os_locale', models.CharField(blank=True, help_text="The locale configured in the device following the BCP 47 standard in 'language' or 'language-region' format (e.g., 'en' for English, 'en-US' for English (United States), 'fr' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.", max_length=16, null=True, validators=[langcodes.tag_is_valid])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='fcmdevice', related_name='devices', to='tigaserver_app.TigaUser')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
                'abstract': False,
            },
        ),
        migrations.RunPython(populate_devices, unpopulate_devices),
        migrations.AlterField(
            model_name='device',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation date'),
        ),
        migrations.AlterField(
            model_name='device',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['device_id', 'user'], name='tigaserver__device__682815_idx'),
        ),
        migrations.AddConstraint(
            model_name='device',
            constraint=models.UniqueConstraint(condition=models.Q(('device_id__isnull', False), ('user__isnull', False), models.Q(_negated=True, device_id='')), fields=('user', 'device_id'), name='unique_user_device_id'),
        ),
        migrations.AddConstraint(
            model_name='device',
            constraint=models.UniqueConstraint(condition=models.Q(('registration_id__isnull', False), ('user__isnull', False), models.Q(_negated=True, registration_id='')), fields=('user', 'registration_id'), name='unique_user_registration_id'),
        ),
        migrations.RemoveField(
            model_name='tigauser',
            name='device_token',
        ),
    ]
