# Generated by Django 2.2.7 on 2024-02-12 15:12

from typing import Tuple
from django.db import migrations, models
from django.db.models.functions import Cast, Coalesce


def update_field_based_on_responses(apps, fieldname, responses: Tuple[str, str], value):
    def responses_list_to_Q(responses: Tuple[str, str], connector: str =models.Q.OR):
        return models.Q(
            *[
                models.Q(question=question, answer=answer)
                for question, answer in responses
            ],
            _connector=connector
        )

    # Loading models
    Report = apps.get_model("tigaserver_app", "Report")
    ReportResponse = apps.get_model("tigaserver_app", "ReportResponse")

    responses_subquery = ReportResponse.objects.filter(report=models.OuterRef('pk')).values('report')

    subquery = responses_subquery.filter(responses_list_to_Q(responses=responses))
    Report.objects.filter(pk__in=models.Subquery(subquery)).update(**{fieldname: value})

def update_boolean_field_based_on_responses(apps, fieldname, responses_dict):

    if False in responses_dict.keys():
        update_field_based_on_responses(apps=apps, fieldname=fieldname, responses=responses_dict[False], value=False)
    
    if True in responses_dict.keys():
        update_field_based_on_responses(apps=apps, fieldname=fieldname, responses=responses_dict[True], value=True)

def populate_breeding_site_has_larvae_field(apps, schema_editor):
    responses_dict = {
        True: [
            ("¿Contiene agua estancada y/o larvas de mosquito?", "Hay agua y veo larvas de mosquito"),
            ("Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?", "Sí, agua y larvas o pupas."),
            ("Conté aigua estancada i/o larves de mosquit?", "Hi ha aigua i veig larves de mosquit"),
            ("Does it contain stagnant water and/or mosquito larvae?", "Has stagnant water with larvae"),
            ("¿Contiene larvas o pupas de mosquito (de cualquier especie)?", "Sí"),
            ("Conté larves o pupes de mosquit (de qualsevol espècie)?", "Sí"),
            ("Conté aigua estancada y/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua i larves o pupes."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Yes, stagnant water with larvae or pupae."),
            ("Conté aigua estancada i/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua i larves o pupes."),
            ("Have you seen mosquito larvae (not necessarily tiger mosquito) inside?", "Yes"),
        ],
        False: [
            ("¿Contiene agua estancada y/o larvas de mosquito?", "Hay agua pero no veo larvas de mosquito"),
            ("Conté aigua estancada i/o larves de mosquit?", "Hi ha aigua però no veig larves de mosquit"),
            ("Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?", "Sí, agua sin larvas ni pupas."),
            ("Does it contain stagnant water and/or mosquito larvae?", "Has stagnant water, but with no larvae"),
            ("Have you seen mosquito larvae (not necessarily tiger mosquito) inside?", "No"),
            ("Conté aigua estancada y/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua sense larves ni pupes."),
            ("Conté aigua estancada y/o larves o pupes de mosquit (qualsevol espècie)?", "No, ni aigua ni larves o pupes."),
            ("¿Contiene larvas o pupas de mosquito (de cualquier especie)?", "No"),
            ("這繁殖地有沒有藏有積水，和/或任何蚊子品種旳幼蟲或蛹？", "有積水，但沒有幼蟲或蛹"),
            ("Conté larves o pupes de mosquit (de qualsevol espècie)?", "No"),
            ("Conté aigua estancada i/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua sense larves ni pupes."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "No, neither stagnant water nor larve nor pupae."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Has stagnant water, but no larvae or pupae."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Yes, stagnant water, but no larvae or pupae."),
            ("這繁殖地有沒有藏有積水，和/或任何蚊子品種旳幼蟲或蛹？", "有積水，但沒有幼蟲或蛹。"),
        ]
    }

    update_boolean_field_based_on_responses(
        apps=apps, 
        fieldname='breeding_site_has_larvae',
        responses_dict=responses_dict
    )


def populate_breeding_site_has_near_mosquitoes(apps, schema_editor):
    responses_dict = {
        True: [
            ("¿Has visto mosquitos cerca (a menos de 10 metros)?", "Sí"),
            ("¿Has visto mosquitos cerca (a <10 metros)?", "Sí"),
            ("Has vist mosquits a prop (a menys de 10 metres)?", "Sí"),
            ("Have you seen mosquitoes nearby (<10 meters)?", "Yes"),
            ("Has vist mosquits a prop (a <10metres)?", "Sí"),
            ("Have you seen adult mosquitoes nearby (<10 meters)?", "Yes"),
            ("你有否在周遭地方見到成年蚊子(少於十米內)？", "是"),
        ],
        False: [
            ("¿Has visto mosquitos cerca (a menos de 10 metros)?", "No"),
            ("Has vist mosquits a prop (a menys de 10 metres)?", "No"),
            ("Have you seen mosquitoes nearby (<10 meters)?", "No"),
            ("¿Has visto mosquitos cerca (a <10 metros)?", "No"),
            ("Has vist mosquits a prop (a <10metres)?", "No"),
            ("Have you seen adult mosquitoes nearby (<10 meters)?", "No"),
            ("你有否在周遭地方見到成年蚊子(少於十米內)？", "否"),
            ("Have you seen adult mosquitoes around the breeding site?", "No"),
        ],
    }

    update_boolean_field_based_on_responses(
        apps=apps, 
        fieldname='breeding_site_has_near_mosquitoes',
        responses_dict=responses_dict
    )

def populate_breeding_site_has_water(apps, schema_editor):
    responses_dict = {
        True: [
            ("question_10", "question_10_answer_101"),
            ("question_17", "question_10_answer_101"),
            ("¿Contiene agua estancada y/o larvas de mosquito?", "Hay agua pero no veo larvas de mosquito"),
            ("¿Contiene agua estancada y/o larvas de mosquito?", "Hay agua y veo larvas de mosquito"),
            ("Conté aigua estancada i/o larves de mosquit?", "Hi ha aigua però no veig larves de mosquit"),
            ("Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?", "Sí, agua y larvas o pupas."),
            ("¿Contiene agua estancada?", "Sí"),
            ("Conté aigua estancada i/o larves de mosquit?", "Hi ha aigua i veig larves de mosquit"),
            ("Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?", "Sí, agua sin larvas ni pupas."),
            ("Does it contain stagnant water and/or mosquito larvae?", "Has stagnant water with larvae"),
            ("Does it contain stagnant water and/or mosquito larvae?", "Has stagnant water, but with no larvae"),
            ("Conté aigua estancada?", "Sí"),
            ("Does it have stagnant water inside?", "Yes"),
            ("Conté aigua estancada y/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua i larves o pupes."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Yes, stagnant water with larvae or pupae."),
            ("Conté aigua estancada i/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua i larves o pupes."),
            ("Conté aigua estancada y/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua sense larves ni pupes."),
            ("這繁殖地有沒有藏有積水，和/或任何蚊子品種旳幼蟲或蛹？", "有積水，但沒有幼蟲或蛹"),
            ("Conté aigua estancada i/o larves o pupes de mosquit (qualsevol espècie)?", "Sí, aigua sense larves ni pupes."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Has stagnant water, but no larvae or pupae."),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Yes, stagnant water, but no larvae or pupae."),
            ("¿Contiene agua?", "Sí"),
            ("這繁殖地有沒有藏有積水，和/或任何蚊子品種旳幼蟲或蛹？", "有積水，但沒有幼蟲或蛹。"),
        ],
        False: [
            ("Conté aigua estancada y/o larves o pupes de mosquit (qualsevol espècie)?", "No, ni aigua ni larves o pupes."),
            ("Conté aigua estancada i/o larves o pupes de mosquit (qualsevol espècie)?", "No, no conté aigua."),
            ("這繁殖地有沒有藏有積水，和/或任何蚊子品種旳幼蟲或蛹？", "沒有積水"),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "No, neither stagnant water nor larve nor pupae."),
            ("Conté aigua estancada?", "No"),
            ("Does it have stagnant water inside?", "No"),
            ("Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?", "Does not contain stagnant water."),
            ("¿Contiene agua estancada y/o larvas de mosquito?", "No hay agua"),
            ("¿Contiene agua estancada?", "No"),
            ("Conté aigua estancada i/o larves de mosquit?", "No hi ha aigua"),
            ("Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?", "No, no contiene agua."),
            ("Does it contain stagnant water and/or mosquito larvae?", "Does not contain stagnant water"),
            ("question_10", "question_10_answer_102"),
            ("question_17", "question_10_answer_102"),
        ],
    }

    update_boolean_field_based_on_responses(
        apps=apps, 
        fieldname='breeding_site_has_water',
        responses_dict=responses_dict
    )

def populate_breeding_site_in_public_area(apps, schema_editor):
    responses_dict = {
        True: [
            ("¿Se encuentra en la vía pública?", "Sí"),
            ("Es troba a la via pública?", "Sí"),
            ("Is it in a public area?", "Yes"),
            ("這繁殖地是否公共空間？", "是"),
        ],
        False: [
            ("¿Se encuentra en la vía pública?", "No"),
            ("Es troba a la via pública?", "No"),
            ("Is it in a public area?", "No"),
            ("這繁殖地是否公共空間？", "否"),
        ],
    }

    update_boolean_field_based_on_responses(
        apps=apps, 
        fieldname='breeding_site_in_public_area',
        responses_dict=responses_dict
    )

def populate_breeding_site_type(apps, schema_editor):

    from tigaserver_app.models import Report

    # Basin
    basin_responses = [
        ("Selecciona lloc de cria", "Basses artificials petites"),
        ("Selecciona lloc de cria", "Bassa petita o similar"),
        ("Tipo de lugar de cría", "Balsa pequeña o similar"),
        ("Tipo de lugar de cría", "Pequeñas balsas artificiales"),
        ("Type of breeding site", "Basin"),
        ("Type of breeding site", "Small basin or similar receptacle"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=basin_responses, value=Report.BREEDING_SITE_TYPE_BASIN)

    # Bucket
    bucket_responses = [
        ("Tipo de lugar de cría", "Bidones"),
        ("Selecciona lloc de cria", "Bidons"),
        ("Type of breeding site", "Bucket"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=bucket_responses, value=Report.BREEDING_SITE_TYPE_BUCKET)

    # Fountain
    fountain_responses = [
        ("Tipo de lugar de cría", "Fuente ornamental"),
        ("Tipo de lugar de cría", "Fuentes"),
        ("Selecciona lloc de cria", "Font ornamental"),
        ("Selecciona lloc de cria", "Fonts"),
        ("Type of breeding site", "Fountain"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=fountain_responses, value=Report.BREEDING_SITE_TYPE_FOUNTAIN)

    # other
    other_responses = [
        ("question_12","question_12_answer_122"),
        ("¿Es un imbornal o alcantarilla?","Otros"),
        ("Tipo de lugar de cría","Otros"),
        ("¿Es un imbornal o alcantarilla?","No"),
        ("És un embornal o claveguera?","Altres"),
        ("Is this a storm drain or sewer?","Other"),
        ("Selecciona lloc de cria","Altres"),
        ("Is this a storm drain or sewer?","No"),
        ("És un embornal o claveguera?","No"),
        ("Type of breeding site	","Other"),
        ("這繁殖地是否排水渠或下水道？","其他"),
        ("這繁殖地是否排水渠或下水道？","否"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=other_responses, value=Report.BREEDING_SITE_TYPE_OTHER)

    # small_container
    small_container_responses = [
        ("Tipo de lugar de cría","Recipiente pequeño"),
        ("Selecciona lloc de cria","Recipient petit"),
        ("Type of breeding site","Small container"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=small_container_responses, value=Report.BREEDING_SITE_TYPE_SMALL_CONTAINER)

    # storm drain
    storm_drain_responses = [
        ("question_12","question_12_answer_121"),
        ("¿Es un imbornal o alcantarilla?","Sí"),
        ("És un embornal o claveguera?","Sí"),
        ("Is this a storm drain or sewer?","Yes"),
        ("Tipo de lugar de cría","Sumidero o imbornal"),
        ("Tipo de lugar de cría","Sumideros"),
        ("Selecciona lloc de cria","Embornal o similar"),
        ("Selecciona lloc de cria","Embornals"),
        ("Type of breeding site","Storm drain"),
        ("Type of breeding site","Storm drain or similar receptacle"),
        ("這繁殖地是否排水渠或下水道？","是"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=storm_drain_responses, value=Report.BREEDING_SITE_TYPE_STORM_DRAIN)

    # well
    well_responses = [
        ("Tipo de lugar de cría","Pozos"),
        ("Selecciona lloc de cria","Pous"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='breeding_site_type', responses=well_responses, value=Report.BREEDING_SITE_TYPE_WELL)

def populate_event_environment(apps, schema_editor):
    from tigaserver_app.models import Report

    # indoors
    indoors_responses = [
        ("question_13","question_13_answer_132"),
        ("question_4","question_4_answer_42"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_environment', responses=indoors_responses, value=Report.EVENT_ENVIRONMENT_INDOORS)

    # outdoors
    outdoors_responses = [
        ("question_13","question_13_answer_133"),
        ("question_4","question_4_answer_43"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_environment', responses=outdoors_responses, value=Report.EVENT_ENVIRONMENT_OUTDOORS)

    # vehicle
    vehicle_responses = [
        ("question_13","question_13_answer_131"),
        ("question_4","question_4_answer_41"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_environment', responses=vehicle_responses, value=Report.EVENT_ENVIRONMENT_VEHICLE)

def populate_event_moment(apps, schema_editor):
    from tigaserver_app.models import Report

    # now
    now_responses = [
        ("question_5","question_5_answer_51"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_moment', responses=now_responses, value=Report.EVENT_MOMENT_NOW)

    # last night
    last_night_responses = [
        ("question_3","question_3_answer_34"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_moment', responses=last_night_responses, value=Report.EVENT_MOMENT_LAST_NIGHT)

    # last afternoon
    last_afternoon_responses = [
        ("question_3","question_3_answer_33"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_moment', responses=last_afternoon_responses, value=Report.EVENT_MOMENT_LAST_AFTERNOON)

    # last midday
    last_midday_responses = [
        ("question_3","question_3_answer_32"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_moment', responses=last_midday_responses, value=Report.EVENT_MOMENT_LAST_MIDDAY)

    # last morning
    last_morning_responses = [
        ("question_3","question_3_answer_31"),
    ]
    update_field_based_on_responses(apps=apps, fieldname='event_moment', responses=last_morning_responses, value=Report.EVENT_MOMENT_LAST_MORNING)


def populate_user_perceived_mosquito_abdomen(apps, schema_editor):
    from tigaserver_app.models import Report

    # albopictus responses
    albopictus_responses = [
        ("question_7","question_7_answer_721"),
        ("¿Tiene rayas blancas en el abdomen y en las patas?", "Sí"),
        ("¿Cómo es el abdomen del mosquito? Consulta el botón (i) y selecciona una respuesta:","Con líneas y manchas blancas finas"),
        ("Com és l’abdomen del mosquit? Consulta el botó (i) i selecciona una resposta:","Amb línies i taques blanques fines"),
        ("What does the abdomen of your mosquito look like? Check the (i) button and select an answer:","With white lines and thin white spots"),
        ("¿Cómo es el abdomen de tu mosquito? Consulta el botón (i) y selecciona una respuesta:","Abdomen como Ae. albopictus"),
        ("Does it have white stripes on the abdomen and legs?","Yes"),
        ("¿Como era el mosquito?","question_7_answer_721"),
        ("Com és l’abdomen del teu mosquit? Consulta el botó (i) i selecciona una resposta:","Abdomen com Ae. albopictus"),
        ("What does the abdomen of your mosquito look like? Check the (i) button and select an answer:","Abdomen like a Ae. albopictus"),
        ("蚊子的腹部是什麼樣子？檢查(i)按鈕，然後選擇一個答案：","有白色條紋和小斑點。"),
        ("Â¿Como era el mosquito?","question_7_answer_721"),
        ("蚊子的腹部是什麼樣子？檢查(i)按鈕，然後選擇一個答案：","有白色條紋和小斑點"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_abdomen', responses=albopictus_responses, value=Report.SPECIE_ALBOPICTUS)

    # aegypti responses
    aegypti_responses = [
        ("question_7","question_7_answer_722"),
        ("¿Cómo es el abdomen del mosquito? Consulta el botón (i) y selecciona una respuesta:","Con líneas y manchas blancas gruesas"),
        ("Com és l’abdomen del mosquit? Consulta el botó (i) i selecciona una resposta:","Amb línies i taques blanques gruixudes"),
        ("¿Cómo es el abdomen del mosquito? Consulta el botón (i) y selecciona una respuesta:","Con líneas y manchas blancas gruesas"),
        ("What does the abdomen of your mosquito look like? Check the (i) button and select an answer:","With white lines and thick white spots"),
        ("¿Cómo es el abdomen de tu mosquito? Consulta el botón (i) y selecciona una respuesta:","Abdomen como Ae. aegypti"),
        ("¿Como era el mosquito?","question_7_answer_722"),
        ("What does the abdomen of your mosquito look like? Check the (i) button and select an answer:","Abdomen like Ae. aegypti"),
        ("Com és l’abdomen del teu mosquit? Consulta el botó (i) i selecciona una resposta:","Abdomen com Ae. aegypti"),
        ("Â¿Como era el mosquito?","question_7_answer_722"),
        ("蚊子的腹部是什麼樣子？檢查(i)按鈕，然後選擇一個答案：","有白色條紋和大斑點"),
        ("蚊子的腹部是什麼樣子？檢查(i)按鈕，然後選擇一個答案：","有白色條紋和大斑點。"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_abdomen', responses=aegypti_responses, value=Report.SPECIE_AEGYPTI)

    # japonicus responses
    japonicus_responses = [
        ("question_7","question_7_answer_723"),
        ("¿Como era el mosquito?","question_7_answer_723"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_abdomen', responses=japonicus_responses, value=Report.SPECIE_JAPONICUS)

    # koreicus responses
    koreicus_responses = [
        ("question_7","question_7_answer_724"),
        ("¿Como era el mosquito?","question_7_answer_724"),
        ("Â¿Como era el mosquito?","question_7_answer_724"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_abdomen', responses=koreicus_responses, value=Report.SPECIE_KOREICUS)

    # other species responses
    other_species_responses = [
        ("¿Cómo es el abdomen de tu mosquito? Consulta el botón (i) y selecciona una respuesta:","Ninguno de los dos"),
        ("¿Cómo es el abdomen del mosquito? Consulta el botón (i) y selecciona una respuesta:","No tiene líneas ni manchas blancas"),
        ("What does the abdomen of your mosquito look like? Check the (i) button and select an answer:","Neither"),
        ("蚊子的腹部是什麼樣子？檢查(i)按鈕，然後選擇一個答案：","皆不是")
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_abdomen', responses=other_species_responses, value=Report.SPECIE_OTHER)

def populate_user_perceived_mosquito_legs(apps, schema_editor):
    from tigaserver_app.models import Report

    # albopictus responses
    albopictus_responses = [
        ("question_7", "question_7_answer_731"),
        ("¿Como era el mosquito?", "question_7_answer_731"),
        ("Â¿Como era el mosquito?", "question_7_answer_731"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_legs', responses=albopictus_responses, value=Report.SPECIE_ALBOPICTUS)

    # aegypti responses
    aegypti_responses = [
        ("question_7", "question_7_answer_732"),
        ("¿Como era el mosquito?", "question_7_answer_732"),
        ("Â¿Como era el mosquito?", "question_7_answer_732"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_legs', responses=aegypti_responses, value=Report.SPECIE_AEGYPTI)

    # japonicus responses
    japonicus_responses = [
        ("question_7", "question_7_answer_733"),
        ("¿Como era el mosquito?", "question_7_answer_733"),
        ("Â¿Como era el mosquito?", "question_7_answer_733"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_legs', responses=japonicus_responses, value=Report.SPECIE_JAPONICUS)

    # koreicus responses
    koreicus_responses = [
        ("question_7", "question_7_answer_734"),
        ("¿Como era el mosquito?", "question_7_answer_734"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_legs', responses=koreicus_responses, value=Report.SPECIE_KOREICUS)

def populate_user_perceived_mosquito_thorax(apps, schema_editor):
    from tigaserver_app.models import Report

    # albopictus responses
    albopictus_responses = [
        ("question_7", "question_7_answer_711"),
        ("Mira justo después de su cabeza, en el tórax. ¿Tiene una sola línea blanca? Consulta el botón (i) y selecciona una respuesta:", "Sí"),
        ("¿Tiene una raya blanca en la cabeza y en el tórax?", "Sí"),
        ("Mira just després del seu cap, al tòrax. Té una sola línia blanca? Consulta el botó (i) i selecciona una resposta:", "Sí"),
        ("Té una ratlla blanca al cap i al tòrax?", "Sí"),
        ("Look right after the head, at the thorax. Does it have a single white line? Check the (i) button and select an answer:", "Yes"),
        ("¿Cómo es el tórax de tu mosquito? Consulta el botón (i) y selecciona una respuesta:", "Tórax like Ae. albopictus"),
        ("¿Como era el mosquito?", "question_7_answer_711"),
        ("Does it have a white stripe on the head and thorax?", "Yes"),
        ("Com és el tòrax del teu mosquit? Consulta el botó (i) i selecciona una resposta:", "Tórax com Ae. albopictus"),
        ("What does the thorax of your mosquito look like? Check the (i) button and select an answer:", "Thorax like Ae. albopictus"),
        ("Â¿Como era el mosquito?", "question_7_answer_711"),
        ("蚊子的胸部是什麼樣子？是否帶有一條白色條紋？檢查(i)按鈕，然後選擇答案：", "是"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_thorax', responses=albopictus_responses, value=Report.SPECIE_ALBOPICTUS)

    # aegypti responses
    aegypti_responses = [
        ("question_7", "question_7_answer_712"),
        ("Mira justo después de su cabeza, en el tórax. ¿Tiene una sola línea blanca? Consulta el botón (i) y selecciona una respuesta:", "No, tiene 4 en forma de lira"),
        ("Look right after the head, at the thorax. Does it have a single white line? Check the (i) button and select an answer:", "No, it has 4 in a lyre-shaped pattern"),
        ("Mira just després del seu cap, al tòrax. Té una sola línia blanca? Consulta el botó (i) i selecciona una resposta:", "No, en té 4 en forma de lira"),
        ("¿Cómo es el tórax de tu mosquito? Consulta el botón (i) y selecciona una respuesta:", "Tórax como Ae. aegypti"),
        ("¿Como era el mosquito?", "question_7_answer_712"),
        ("What does the thorax of your mosquito look like? Check the (i) button and select an answer:", "Thorax like Ae. aegypti"),
        ("Com és el tòrax del teu mosquit? Consulta el botó (i) i selecciona una resposta:", "Tórax com Ae. aegypti"),
        ("蚊子的胸部是什麼樣子？是否帶有一條白色條紋？檢查(i)按鈕，然後選擇答案：", "否，蚊子有成豎琴形的四條白色條紋。"),
        ("蚊子的胸部是什麼樣子？是否帶有一條白色條紋？檢查(i)按鈕，然後選擇答案：", "否，蚊子有四條白色條紋組成豎琴形"),
        ("Â¿Como era el mosquito?", "question_7_answer_712"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_thorax', responses=aegypti_responses, value=Report.SPECIE_AEGYPTI)

    # japonicus responses
    japonicus_responses = [
        ("question_7", "question_7_answer_713"),
        ("¿Como era el mosquito?", "question_7_answer_713"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_thorax', responses=japonicus_responses, value=Report.SPECIE_JAPONICUS)

    # koreicus responses
    koreicus_responses = [
        ("question_7", "question_7_answer_714"),
        ("¿Como era el mosquito?", "question_7_answer_714"),
        ("Â¿Como era el mosquito?", "question_7_answer_714"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_thorax', responses=koreicus_responses, value=Report.SPECIE_KOREICUS)

    # other species responses
    other_species_responses = [
        ("¿Cómo es el tórax de tu mosquito? Consulta el botón (i) y selecciona una respuesta:","Ninguno de los dos"),
        ("Com és el tòrax del teu mosquit? Consulta el botó (i) i selecciona una resposta:","Cap dels dos"),
        ("What does the thorax of your mosquito look like? Check the (i) button and select an answer:","Neither"),
        ("Mira just després del seu cap, al tòrax. Té una sola línia blanca? Consulta el botó (i) i selecciona una resposta:","Cap dels dos"),
        ("Mira justo después de su cabeza, en el tórax. ¿Tiene una sola línea blanca? Consulta el botón (i) y selecciona una respuesta:","Ninguno de los dos"),
        ("Look right after the head, at the thorax. Does it have a single white line? Check the (i) button and select an answer:","Neither"),
        ("蚊子的胸部是什麼樣子？是否帶有一條白色條紋？檢查(i)按鈕，然後選擇答案：","皆不是")
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_thorax', responses=other_species_responses, value=Report.SPECIE_OTHER)

def populate_user_perceived_mosquito_specie(apps, schema_editor):
    from tigaserver_app.models import Report

    # albopictus responses
    albopictus_responses = [
        ("question_6", "question_6_answer_61"),
        ("¿Es pequeño y negro con rayas blancas?", "Sí"),
        ("¿De qué color es? Consulta el botón (i) y selecciona una respuesta:", "Negro con líneas blancas en cuerpo y patas"),
        ("De quin color és? Consulta el botó (i) i selecciona una resposta:", "Negre amb línies blanques al cos i les potes"),
        ("What color is your mosquito? Check the (i) button and select an answer:", "Black with white lines on the body and the legs"),
        ("És petit i negre amb ratlles blanques?", "Sí"),
        ("¿De qué color es? Consulta el botón (i) y selecciona una respuesta:", "Negro con líneas blancas en cuerpo y patas"),
        ("¿Cómo es tu mosquito? Consulta el botón (i) y selecciona una respuesta:", "Como Ae. albopictus"),
        ("Is it small and black with white stripes?", "Yes"),
        ("Com és el teu mosquit? Consulta el botó (i) i selecciona una resposta:", "Com Ae. albopictus"),
        ("What does your mosquito look like? Check the (i) button and select an answer:", "Like Ae. albopictus"),
        ("你的蚊子是什麼顏色？檢查(i)按鈕，然後選擇一個答案：", "黑色身軀，並且在腹部和腿部有白色條紋"),
        ("你的蚊子是什麼顏色？檢查(i)按鈕，然後選擇一個答案：", "黑色身軀，並且在腹部和腿部有白色條紋。"),
        ("What color is your mosquito? Check the (i) button and select an answer:", "Black with with white lines on the body and the legs"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_specie', responses=albopictus_responses, value=Report.SPECIE_ALBOPICTUS)

    # aegypti responses
    aegypti_responses = [
        ("¿Cómo es tu mosquito? Consulta el botón (i) y selecciona una respuesta:", "Como Ae. aegypti"),
        ("What does your mosquito look like? Check the (i) button and select an answer:", "Like Ae. aegypti"),
        ("Com és el teu mosquit? Consulta el botó (i) i selecciona una resposta:", "Com Ae. aegypti"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_specie', responses=aegypti_responses, value=Report.SPECIE_AEGYPTI)


    # culex responses
    culex_responses = [
        ("question_6", "question_6_answer_62"),
        ("¿De qué color es? Consulta el botón (i) y selecciona una respuesta:", "Marrón con líneas blancas en cuerpo y patas"),
        ("De quin color és? Consulta el botó (i) i selecciona una resposta:", "Marró amb línies blanques al cos i les potes"),
        ("What color is your mosquito? Check the (i) button and select an answer:", "Brown with white lines on the body and the legs"),
        ("你的蚊子是什麼顏色？檢查(i)按鈕，然後選擇一個答案：", "棕色身軀，並且在腹部和腿部有白色條紋"),
    ]
    
    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_specie', responses=culex_responses, value=Report.SPECIE_CULEX)

    # other specie responses
    other_specie_responses = [
        ("question_6", "question_6_answer_63"),
        ("¿Cómo es tu mosquito? Consulta el botón (i) y selecciona una respuesta:", "None of them"),
        ("Com és el teu mosquit? Consulta el botó (i) i selecciona una resposta:", "Cap dels dos"),
        ("What does your mosquito look like? Check the (i) button and select an answer:", "Neither"),
        ("¿De qué color es? Consulta el botón (i) y selecciona una respuesta:", "Ninguno de los dos"),
        ("De quin color és? Consulta el botó (i) i selecciona una resposta:", "Cap dels dos"),
        ("What color is your mosquito? Check the (i) button and select an answer:", "Neither"),
        ("你的蚊子是什麼顏色？檢查(i)按鈕，然後選擇一個答案：", "皆不是"),
    ]

    update_field_based_on_responses(apps=apps, fieldname='user_perceived_mosquito_specie', responses=other_specie_responses, value=Report.SPECIE_OTHER)


def populate_bite_count(apps, schema_editor):

    def update_bite_body_part(apps, fieldname, answer_id):
        # Loading models
        Report = apps.get_model("tigaserver_app", "Report")
        ReportResponse = apps.get_model("tigaserver_app", "ReportResponse")

        subquery = ReportResponse.objects.filter(
            report=models.OuterRef('pk'),
            question_id=2,
            answer_id=answer_id
        ).values('answer_value')[:1]

        Report.objects.update(
            **{f"{fieldname}": Cast(
                models.Subquery(subquery),
                output_field=Report._meta.get_field(fieldname).__class__()
            )}
        )

        from tigaserver_app.models import Report as ModelReport

        # Ensure bite report field are set to 0 as default.
        Report.objects.filter(
            type=ModelReport.TYPE_BITE,
            **{f"{fieldname}__isnull": True}
        ).update(**{f"{fieldname}": 0})

    # Loading models
    Report = apps.get_model("tigaserver_app", "Report")

    update_bite_body_part(
        apps=apps,
        fieldname="chest_bite_count",
        answer_id=24
    )

    update_bite_body_part(
        apps=apps,
        fieldname="head_bite_count",
        answer_id=21
    )

    update_bite_body_part(
        apps=apps,
        fieldname="left_arm_bite_count",
        answer_id=22
    )

    update_bite_body_part(
        apps=apps,
        fieldname="right_arm_bite_count",
        answer_id=23
    )

    update_bite_body_part(
        apps=apps,
        fieldname="left_leg_bite_count",
        answer_id=25
    )

    update_bite_body_part(
        apps=apps,
        fieldname="right_leg_bite_count",
        answer_id=26
    )

    # NOTE: bite count must be the last.
    Report.objects.update(
        bite_count=models.ExpressionWrapper(
            Coalesce(models.F('head_bite_count'), 0) +
            Coalesce(models.F('left_arm_bite_count'), 0) +
            Coalesce(models.F('right_arm_bite_count'), 0) +
            Coalesce(models.F('chest_bite_count'), 0) +
            Coalesce(models.F('left_leg_bite_count'), 0) +
            Coalesce(models.F('right_leg_bite_count'), 0),
            output_field=models.PositiveSmallIntegerField()
        )
    )


class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0048_report_responses_to_column'),
    ]

    operations = [
        migrations.RunPython(populate_breeding_site_has_larvae_field, migrations.RunPython.noop),
        migrations.RunPython(populate_breeding_site_has_near_mosquitoes, migrations.RunPython.noop),
        migrations.RunPython(populate_breeding_site_has_water, migrations.RunPython.noop),
        migrations.RunPython(populate_breeding_site_in_public_area, migrations.RunPython.noop),
        migrations.RunPython(populate_breeding_site_type, migrations.RunPython.noop),
        migrations.RunPython(populate_event_environment, migrations.RunPython.noop),
        migrations.RunPython(populate_event_moment, migrations.RunPython.noop),    
        migrations.RunPython(populate_user_perceived_mosquito_abdomen, migrations.RunPython.noop),
        migrations.RunPython(populate_user_perceived_mosquito_legs, migrations.RunPython.noop),
        migrations.RunPython(populate_user_perceived_mosquito_thorax, migrations.RunPython.noop),
        migrations.RunPython(populate_user_perceived_mosquito_specie, migrations.RunPython.noop),
        migrations.RunPython(populate_bite_count, migrations.RunPython.noop),
    ]
