# Generated by Django 2.2.7 on 2024-10-30 12:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

def delete_duplicate_photo_predictions(apps, schema_editor):
    Photo = apps.get_model("tigaserver_app", "Photo")
    IAScore = apps.get_model('tigaserver_app', 'IAScore')

    photos = Photo.objects.annotate(n_iascore=models.Count('photo_iascore')).filter(n_iascore__gt=1)

    iascores_pk_to_delete = []
    for photo in photos.iterator():
        # Get all IAScores for the photo, sorted by primary key (pk)
        # And delete the oldest ones
        iascores_pk_to_delete += list(
            photo.photo_iascore.values_list('pk', flat=True).order_by('pk')
        )[:-1]
    
    IAScore.objects.filter(pk__in=iascores_pk_to_delete).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('tigacrafting', '0022_auto_20241029_1010'),
        ('tigaserver_app', '0061_rename_iascore_fields'),
    ]

    operations = [
        migrations.RunPython(delete_duplicate_photo_predictions, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='iascore',
            name='id',
        ),
        migrations.AlterField(
            model_name='iascore',
            name='photo',
            field=models.OneToOneField(help_text='Photo to which the score refers to', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='iascore', serialize=False, to='tigaserver_app.Photo', limit_choices_to={'report__type': 'adult'}),
        ),
        migrations.AddField(
            model_name='iascore',
            name='expert_annotation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tigacrafting.ExpertReportAnnotation'),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='insect_confidence',
            field=models.FloatField(help_text='Insect confidence',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='ae_aegypti',
            field=models.FloatField(help_text='Score for Ae. aegypti',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='ae_albopictus',
            field=models.FloatField(help_text='Score for Ae. albopictus',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='ae_japonicus',
            field=models.FloatField(help_text='Score for Ae. japonicus',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='ae_koreicus',
            field=models.FloatField(help_text='Score for Ae. koreicus',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='anopheles',
            field=models.FloatField(help_text='Score for Anopheles (s.p.)',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='culex',
            field=models.FloatField(help_text='Score for Culex (s.p.)',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='culiseta',
            field=models.FloatField(help_text='Score for Culiseta (s.p.)',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='not_sure',
            field=models.FloatField(blank=True, help_text='Score for not sure class', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='other_species',
            field=models.FloatField(help_text='Score for other species',  validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='x_br',
            field=models.PositiveIntegerField(help_text='photo bounding box coordinates bottom right x'),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='x_tl',
            field=models.PositiveIntegerField(help_text='photo bounding box coordinates top left x'),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='y_br',
            field=models.PositiveIntegerField(help_text='photo bounding box coordinates bottom right y'),
        ),
        migrations.AlterField(
            model_name='iascore',
            name='y_tl',
            field=models.PositiveIntegerField(help_text='photo bounding box coordinates top left y'),
        ),
        migrations.AddConstraint(
            model_name='iascore',
            constraint=models.CheckConstraint(check=models.Q(x_tl__lte=django.db.models.expressions.F('x_br')), name='x_tl_less_equal_x_br'),
        ),
        migrations.AddConstraint(
            model_name='iascore',
            constraint=models.CheckConstraint(check=models.Q(y_tl__lte=django.db.models.expressions.F('y_br')), name='y_tl_less_equal_y_br'),
        ),
    ]
