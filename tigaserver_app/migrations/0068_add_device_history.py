# Generated by Django 2.2.7 on 2024-11-14 11:43

from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import langcodes
from langcodes import standardize_tag as standarize_language_tag


def populate_device_histories(apps, schema_editor):
    Report = apps.get_model('tigaserver_app', 'Report')
    Device = apps.get_model('tigaserver_app', 'Device')
    HistoricalDevice = apps.get_model("tigaserver_app", "HistoricalDevice")

    history_to_add = []
    for device in Device.objects.all().iterator():
        history_to_add.append(
            HistoricalDevice(
                id=device.pk,
                active=device.active,
                device_id=device.device_id,
                registration_id=device.registration_id,
                type=device.type,
                manufacturer=device.manufacturer,
                model=device.model,
                os_name=device.os_name,
                os_version=device.os_version,
                history_date=device.date_created,
                history_type='+',
                history_user_id=device.user_id,
                mobile_app_id=device.mobile_app_id,
                os_locale=device.os_locale,
            )
        )

    # Create change histories.
    device_change_qs = Report.objects.exclude(
        mobile_app=models.F('device__mobile_app'),
        device_manufacturer=models.F('device__manufacturer'),
        os=models.F('device__os_name'),
        os_version=models.F('device__os_version'),
        os_language=models.F('device__os_locale')
    ).values(
        "user_id", "device_id", "device__active", "device__device_id", "device__registration_id", "mobile_app_id", "device_manufacturer", "device_model", "os", "os_version", "os_language"
    ).annotate(
        first_upload_time=models.Min('server_upload_time'),
    )
    for device_change_in_report in device_change_qs.iterator():
        history_to_add.append(
            HistoricalDevice(
                id=device_change_in_report['device_id'],
                active=device_change_in_report['device__active'],
                device_id=device_change_in_report['device__device_id'],
                registration_id=device_change_in_report['device__registration_id'],
                type={
                    'android': 'android',
                    'ipados': 'ios',
                    'ios': 'ios',
                    'iphone os': 'ios'
                }.get(device_change_in_report['os'].lower() if device_change_in_report['os'] else None),
                manufacturer=device_change_in_report['device_manufacturer'],
                model=device_change_in_report['device_model'],
                os_name=device_change_in_report['os'],
                os_version=device_change_in_report['os_version'],
                history_date=device_change_in_report['first_upload_time'],
                history_type='~',
                history_user_id=device_change_in_report['user_id'],
                mobile_app_id=device_change_in_report['mobile_app_id'],
                os_locale=standarize_language_tag(device_change_in_report['os_language']),
            )
        )

    HistoricalDevice.objects.bulk_create(history_to_add, batch_size=2000)


class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0067_add_report_device'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalDevice',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('active', models.BooleanField(default=True, help_text='Inactive devices will not be sent notifications', verbose_name='Is active')),
                ('device_id', models.CharField(blank=True, db_index=True, help_text='Unique device identifier', max_length=255, null=True, verbose_name='Device ID')),
                ('registration_id', models.TextField(db_index=True, null=True, verbose_name='Registration token')),
                ('type', models.CharField(null=True, choices=[('ios', 'ios'), ('android', 'android'), ('web', 'web')], max_length=10)),
                ('manufacturer', models.CharField(blank=True, help_text='The manufacturer of the device.', max_length=128, null=True)),
                ('model', models.CharField(blank=True, help_text='The end-user-visible name for the end product.', max_length=128, null=True)),
                ('os_name', models.CharField(blank=True, help_text='Operating system of device from which this report was submitted.', max_length=64, null=True)),
                ('os_version', models.CharField(blank=True, help_text='Operating system version of device from which this report was submitted.', max_length=16, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='tigaserver_app.TigaUser')),
                ('mobile_app', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tigaserver_app.MobileApp')),
                ('os_locale', models.CharField(blank=True, help_text="The locale configured in the device following the BCP 47 standard in 'language' or 'language-region' format (e.g., 'en' for English, 'en-US' for English (United States), 'fr' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.", max_length=16, null=True, validators=[langcodes.tag_is_valid])),
            ],
            options={
                'verbose_name': 'historical Device',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RunPython(populate_device_histories, migrations.RunPython.noop),
    ]
